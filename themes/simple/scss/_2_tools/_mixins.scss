
// Typography

//Set a rem font size with pixel fallback
@function calculateRem($size) {
  $remSize: $size / 10;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size * 1px;
  font-size: calculateRem($size);
}

@mixin line-height($size) {
  line-height: $size * 1px;
  line-height: calculateRem($size);
}

// Body copy
@mixin body-copy() {
  color: $body-copy;
  font-family: Helvetica,Arial,sans-serif;
  @include font-size(14);
  font-weight: $body-copy-weight;
}




// #######################################################
// Style elements
// 




//Cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Visually hide an element
.visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//useage:
//.visually-hidden {
//   @extend .visuallyhidden;
// }


// Style placeholder text
@mixin placeholder-text($selectorName,$colour) {
  #{$selectorName}::-webkit-input-placeholder {
     color: $colour;
  }

  #{$selectorName}:-moz-placeholder { /* Firefox 18- */
     color: $colour; 
     opacity:  1;
  }

  #{$selectorName}::-moz-placeholder {  /* Firefox 19+ */
     color: $colour;  
     opacity:  1;
  }

  #{$selectorName}:-ms-input-placeholder {  
     color: $colour;  
  }
}

//useage:
// @include placeholder-text("input", #888);
// }


// #######################################################

// Transitions
// 


@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


// #######################################################

// Transitions

@mixin transform-any($transform-string) {
  -webkit-transform: $transform-string;
      -ms-transform: $transform-string; // IE9 only
       -o-transform: $transform-string;
          transform: $transform-string;
}








// #######################################################
/* This mixin creates an arrow as an inline element. Any spacing or placement will have to be further defined */
// Example of it's usage: http://codepen.io/solnet-digital/pen/FEgex?editors=110



@mixin nav-arrow ($arrow-direction: left, $arrow-width: 6px, $arrow-height: 12px, $arrow-stroke: 1px, $arrow-colour: black, $arrow-mask-colour: white, $arrow-hover: #aaa) {
  
  /* set up default selectors for left arrow */
  $border-transparent1 : border-top;
  $border-transparent2 : border-bottom;
  $border-arrow : border-right;
  $border-arrow-point: border-left;
  /* if it's another direction, reset the variables */
  @if $arrow-direction == right {
      $border-transparent1 : border-top;
      $border-transparent2 : border-bottom;
      $border-arrow : border-left;
      $border-arrow-point: border-right;
    
  } @else if $arrow-direction == up {
      $border-transparent1 : border-left;
      $border-transparent2 : border-right;
      $border-arrow : border-bottom;
      $border-arrow-point: border-top;
    
  } @else if $arrow-direction == down {
      $border-transparent1 : border-left;
      $border-transparent2 : border-right;
      $border-arrow : border-top;
      $border-arrow-point: border-bottom;
  }
  
  /* assign values to selectors depending on arrow orientation */ 
  @if $arrow-direction == up or $arrow-direction == down {
    #{$border-transparent1}: $arrow-width solid transparent;
    #{$border-transparent2}: $arrow-width solid transparent;
    #{$border-arrow}: $arrow-height solid $arrow-colour;
    #{$border-arrow-point}: none;
  } @else {
    #{$border-transparent1}: $arrow-height solid transparent;
    #{$border-transparent2}: $arrow-height solid transparent;
    #{$border-arrow}: $arrow-width solid $arrow-colour;
    #{$border-arrow-point}: none;
  }
  background-color: transparent; /* in case it's used on a button */
  display: inline-block;
  padding: 0;
  width: 0;
  height: 0; 
  position: relative;
  vertical-align: middle;

  &:after {
    content: "";
    display: block;
    width: 0;
    height: 0;
    @if $arrow-direction == up or $arrow-direction == down {
      #{$border-transparent1}: $arrow-width solid transparent;
      #{$border-transparent2}: $arrow-width solid transparent;
      #{$border-arrow}: $arrow-height solid $arrow-mask-colour;
    } @else {
      #{$border-transparent1}: $arrow-height solid transparent;
      #{$border-transparent2}: $arrow-height solid transparent;
      #{$border-arrow}: $arrow-width solid $arrow-mask-colour;
    }
    position: absolute;
    
    @if $arrow-direction == left {
      left: $arrow-stroke;
      top: ($arrow-height * -1); /*Invert the value to offset from centre*/
    } @else if $arrow-direction == right {
      left: ($arrow-width* -1) - $arrow-stroke;
      top: ($arrow-height * -1); /*Invert the value to offset from centre*/
    } @else if $arrow-direction == up {
      left: ($arrow-width * -1);
      top: $arrow-stroke; 
    } @else if $arrow-direction == down {
      left: ($arrow-width * -1);
      top: ($arrow-height * -1) - $arrow-stroke; 
    }
  }
  &:hover {
    @if $arrow-direction == up or $arrow-direction == down {
      #{$border-arrow}: $arrow-height solid $arrow-hover;  
    } @else {
      #{$border-arrow}: $arrow-width solid $arrow-hover;  
    }
    cursor: pointer;
  }
}


// FLEX BOX MIXINS
// 
@mixin flexbox() {
  display: -webkit-box;  /* OLD - iOS 6-, Safari 3.1-6, BB7 */
  display: -ms-flexbox;  /* TWEENER - IE 10 */
  display: -webkit-flex; /* NEW - Safari 6.1+. iOS 7.1+, BB10 */
  display: flex;         /* NEW, Spec - Firefox, Chrome, Opera */
}

@mixin flex-direction($value:row) {
   -webkit-flex-direction: $value;
   flex-direction: $value;
}

@mixin flex-wrap($value:wrap) {
   -webkit-flex-wrap: $value;
   flex-wrap: $value;
}

@mixin flex-flow($val:row, $val2:wrap) {
  -webkit-flex-flow: $val $val2;
  flex-flow: $val $val2;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}

@mixin justify($val) {
  justify-content: $val;
  -webkit-justify-content: $val;
}





